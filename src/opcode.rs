use crate::{stack::Label, MemoryOperand, RefType, ValueType};

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub enum OpCode {
    Unreachable = 0x00,
    Nop = 0x01,
    Block = 0x02,
    Loop = 0x03,
    If = 0x04,
    Else = 0x05,
    End = 0x0b,
    Branch = 0x0c,
    BranchIf = 0x0d,
    BranchTable = 0x0e,
    Return = 0x0f,
    Call = 0x10,
    CallIndirect = 0x11,
    Drop = 0x1a,
    Select = 0x1b,
    SelectT = 0x1c,
    LocalGet = 0x20,
    LocalSet = 0x21,
    LocalTee = 0x22,
    GlobalGet = 0x23,
    GlobalSet = 0x24,
    TableGet = 0x25,
    TableSet = 0x26,
    i32Load = 0x28,
    i64Load = 0x29,
    f32Load = 0x2a,
    f64Load = 0x2b,
    i32Load8Signed = 0x2c,
    i32Load8Unsigned = 0x2d,
    i32Load16Signed = 0x2e,
    i32Load16Unsigned = 0x2f,
    i64Load8Signed = 0x30,
    i64Load8Unsigned = 0x31,
    i64Load16Signed = 0x32,
    i64Load16Unsigned = 0x33,
    i64Load32Signed = 0x34,
    i64Load32Unsigned = 0x35,
    i32Store = 0x36,
    i64Store = 0x37,
    f32Store = 0x38,
    f64Store = 0x39,
    i32Store8 = 0x3a,
    i32Store16 = 0x3b,
    i64Store8 = 0x3c,
    i64Store16 = 0x3d,
    i64Store32 = 0x3e,
    MemorySize = 0x3f,
    MemoryGrow = 0x40,
    i32Const = 0x41,
    i64Const = 0x42,
    f32Const = 0x43,
    f64Const = 0x44,
    i32EqZero = 0x45,
    i32Eq = 0x46,
    i32Ne = 0x47,
    i32LtSigned = 0x48,
    i32LtUnsigned = 0x49,
    i32GtSigned = 0x4a,
    i32GtUnsigned = 0x4b,
    i32LeSigned = 0x4c,
    i32LeUnsigned = 0x4d,
    i32GeSigned = 0x4e,
    i32GeUnsigned = 0x4f,
    i64EqZero = 0x50,
    i64Eq = 0x51,
    i64Ne = 0x52,
    i64LtSigned = 0x53,
    i64LtUnsigned = 0x54,
    i64GtSigned = 0x55,
    i64GtUnsigned = 0x56,
    i64LeSigned = 0x57,
    i64LeUnsigned = 0x58,
    i64GeSigned = 0x59,
    i64GeUnsigned = 0x5a,
    f32Eq = 0x5b,
    f32Ne = 0x5c,
    f32Lt = 0x5d,
    f32Gt = 0x5e,
    f32Le = 0x5f,
    f32Ge = 0x60,
    f64Eq = 0x61,
    f64Ne = 0x62,
    f64Lt = 0x63,
    f64Gt = 0x64,
    f64Le = 0x65,
    f64Ge = 0x66,
    i32CountLeadingZeros = 0x67,
    i32CountTrailingZeros = 0x68,
    i32PopulationCount = 0x69,
    i32Add = 0x6a,
    i32Sub = 0x6b,
    i32Mul = 0x6c,
    i32SignedDiv = 0x6d,
    i32UnsignedDiv = 0x6e,
    i32SignedRem = 0x6f,
    i32UnsignedRem = 0x70,
    i32BitwiseAnd = 0x71,
    i32BitwiseOr = 0x72,
    i32BitwiseXor = 0x73,
    i32BitwiseShiftLeft = 0x74,
    i32SignedBitwiseShiftRight = 0x75,
    i32UnsignedBitwiseShiftRight = 0x76,
    i32RotateLeft = 0x77,
    i32RotateRight = 0x78,
    i64CountLeadingZeros = 0x79,
    i64CountTrailingZeros = 0x7a,
    i64PopulationCount = 0x7b,
    i64Add = 0x7c,
    i64Sub = 0x7d,
    i64Mul = 0x7e,
    i64SignedDiv = 0x7f,
    i64UnsignedDiv = 0x80,
    i64SignedRem = 0x81,
    i64UnsignedRem = 0x82,
    i64BitwiseAnd = 0x83,
    i64BitwiseOr = 0x84,
    i64BitwiseXor = 0x85,
    i64BitwiseShiftLeft = 0x86,
    i64SignedBitwiseShiftRight = 0x87,
    i64UnsignedBitwiseShiftRight = 0x88,
    i64RotateLeft = 0x89,
    i64RotateRight = 0x8a,
    f32Abs = 0x8b,
    f32Neg = 0x8c,
    f32Ceil = 0x8d,
    f32Floor = 0x8e,
    f32Trunc = 0x8f,
    f32Nearest = 0x90,
    f32Sqrt = 0x91,
    f32Add = 0x92,
    f32Sub = 0x93,
    f32Mul = 0x94,
    f32Div = 0x95,
    f32Min = 0x96,
    f32Max = 0x97,
    f32CopySign = 0x98,
    f64Abs = 0x99,
    f64Neg = 0x9a,
    f64Ceil = 0x9b,
    f64Floor = 0x9c,
    f64Trunc = 0x9d,
    f64Nearest = 0x9e,
    f64Sqrt = 0x9f,
    f64Add = 0xa0,
    f64Sub = 0xa1,
    f64Mul = 0xa2,
    f64Div = 0xa3,
    f64Min = 0xa4,
    f64Max = 0xa5,
    f64CopySign = 0xa6,
    i32WrapI64 = 0xa7,
    i32TruncF32Signed = 0xa8,
    i32TruncF32Unsigned = 0xa9,
    i32TruncF64Signed = 0xaa,
    i32TruncF64Unsigned = 0xab,
    i64Extendi32Signed = 0xac,
    i64Extendi32Unsigned = 0xad,
    i64TruncF32Signed = 0xae,
    i64TruncF32Unsigned = 0xaf,
    i64TruncF64Signed = 0xb0,
    i64TruncF64Unsigned = 0xb1,
    f32SignedConvertI32 = 0xb2,
    f32UnsignedConvertI32 = 0xb3,
    f32SignedConvertI64 = 0xb4,
    f32UnsignedConvertI64 = 0xb5,
    f32DemoteF64 = 0xb6,
    f64SignedConvertI32 = 0xb7,
    f64UnsignedConvertI32 = 0xb8,
    f64SignedConvertI64 = 0xb9,
    f64UnsignedConvertI64 = 0xba,
    f64PromoteF32 = 0xbb,
    i32ReinterpretF32 = 0xbc,
    i64ReinterpretF64 = 0xbd,
    f32ReinterpretI32 = 0xbe,
    f64ReinterpretI64 = 0xbf,
    i32Extend8Signed = 0xc0,
    i32Extend16Signed = 0xc1,
    i64Extend8Signed = 0xc2,
    i64Extend16Signed = 0xc3,
    i64Extend32Signed = 0xc4,
    RefNull = 0xd0,
    RefIsNull = 0xd1,
    RefFunc = 0xd2,
    i32TruncSatf32Signed = 0xfc_00,
    i32TruncSatf32Unsigned = 0xfc_01,
    i32TruncSatf64Signed = 0xfc_02,
    i32TruncSatf64Unsigned = 0xfc_03,
    i64TruncSatf32Signed = 0xfc_04,
    i64TruncSatf32Unsigned = 0xfc_05,
    i64TruncSatf64Signed = 0xfc_06,
    i64TruncSatf64Unsigned = 0xfc_07,
    MemoryInit = 0xfc_08,
    DataDrop = 0xfc_09,
    MemoryCopy = 0xfc_0a,
    MemoryFill = 0xfc_0b,
    TableInit = 0xfc_0c,
    ElemDrop = 0xfc_0d,
    TableCopy = 0xfc_0e,
    TableGrow = 0xfc_0f,
    TableSize = 0xfc_10,
    TableFill = 0xfc_11,
}

#[allow(non_camel_case_types)]
#[derive(Debug, PartialEq, Clone)]
pub enum Instruction {
    Unreachable,
    Nop,
    Block(Label),
    Loop(Label),
    If(Label),
    Else,
    End,
    Branch(u32),
    BranchIf(u32),
    BranchTable(Vec<u32>),
    Return,
    Call(u32),
    CallIndirect(u32, u32),
    Drop,
    Select(Vec<ValueType>),
    SelectT,
    LocalGet(u32),
    LocalSet(u32),
    LocalTee(u32),
    GlobalGet(u32),
    GlobalSet(u32),
    TableGet(u32),
    TableSet(u32),
    i32Load(MemoryOperand),
    i64Load(MemoryOperand),
    f32Load(MemoryOperand),
    f64Load(MemoryOperand),
    i32Load8Signed(MemoryOperand),
    i32Load8Unsigned(MemoryOperand),
    i32Load16Signed(MemoryOperand),
    i32Load16Unsigned(MemoryOperand),
    i64Load8Signed(MemoryOperand),
    i64Load8Unsigned(MemoryOperand),
    i64Load16Signed(MemoryOperand),
    i64Load16Unsigned(MemoryOperand),
    i64Load32Signed(MemoryOperand),
    i64Load32Unsigned(MemoryOperand),
    i32Store(MemoryOperand),
    i64Store(MemoryOperand),
    f32Store(MemoryOperand),
    f64Store(MemoryOperand),
    i32Store8(MemoryOperand),
    i32Store16(MemoryOperand),
    i64Store8(MemoryOperand),
    i64Store16(MemoryOperand),
    i64Store32(MemoryOperand),
    MemorySize,
    MemoryGrow,
    i32Const(i32),
    i64Const(i64),
    f32Const(f32),
    f64Const(f64),
    i32EqZero,
    i32Eq,
    i32Ne,
    i32LtSigned,
    i32LtUnsigned,
    i32GtSigned,
    i32GtUnsigned,
    i32LeSigned,
    i32LeUnsigned,
    i32GeSigned,
    i32GeUnsigned,
    i64EqZero,
    i64Eq,
    i64Ne,
    i64LtSigned,
    i64LtUnsigned,
    i64GtSigned,
    i64GtUnsigned,
    i64LeSigned,
    i64LeUnsigned,
    i64GeSigned,
    i64GeUnsigned,
    f32Eq,
    f32Ne,
    f32Lt,
    f32Gt,
    f32Le,
    f32Ge,
    f64Eq,
    f64Ne,
    f64Lt,
    f64Gt,
    f64Le,
    f64Ge,
    i32CountLeadingZeros,
    i32CountTrailingZeros,
    i32PopulationCount,
    i32Add,
    i32Sub,
    i32Mul,
    i32SignedDiv,
    i32UnsignedDiv,
    i32SignedRem,
    i32UnsignedRem,
    i32BitwiseAnd,
    i32BitwiseOr,
    i32BitwiseXor,
    i32BitwiseShiftLeft,
    i32SignedBitwiseShiftRight,
    i32UnsignedBitwiseShiftRight,
    i32RotateLeft,
    i32RotateRight,
    i64CountLeadingZeros,
    i64CountTrailingZeros,
    i64PopulationCount,
    i64Add,
    i64Sub,
    i64Mul,
    i64SignedDiv,
    i64UnsignedDiv,
    i64SignedRem,
    i64UnsignedRem,
    i64BitwiseAnd,
    i64BitwiseOr,
    i64BitwiseXor,
    i64BitwiseShiftLeft,
    i64SignedBitwiseShiftRight,
    i64UnsignedBitwiseShiftRight,
    i64RotateLeft,
    i64RotateRight,
    f32Abs,
    f32Neg,
    f32Ceil,
    f32Floor,
    f32Trunc,
    f32Nearest,
    f32Sqrt,
    f32Add,
    f32Sub,
    f32Mul,
    f32Div,
    f32Min,
    f32Max,
    f32CopySign,
    f64Abs,
    f64Neg,
    f64Ceil,
    f64Floor,
    f64Trunc,
    f64Nearest,
    f64Sqrt,
    f64Add,
    f64Sub,
    f64Mul,
    f64Div,
    f64Min,
    f64Max,
    f64CopySign,
    i32WrapI64,
    i32TruncF32Signed,
    i32TruncF32Unsigned,
    i32TruncF64Signed,
    i32TruncF64Unsigned,
    i64Extendi32Signed,
    i64Extendi32Unsigned,
    i64TruncF32Signed,
    i64TruncF32Unsigned,
    i64TruncF64Signed,
    i64TruncF64Unsigned,
    f32SignedConvertI32,
    f32UnsignedConvertI32,
    f32SignedConvertI64,
    f32UnsignedConvertI64,
    f32DemoteF64,
    f64SignedConvertI32,
    f64UnsignedConvertI32,
    f64SignedConvertI64,
    f64UnsignedConvertI64,
    f64PromoteF32,
    i32ReinterpretF32,
    i64ReinterpretF64,
    f32ReinterpretI32,
    f64ReinterpretI64,
    i32Extend8Signed,
    i32Extend16Signed,
    i64Extend8Signed,
    i64Extend16Signed,
    i64Extend32Signed,
    RefNull(RefType),
    RefIsNull,
    RefFunc(u32),
    i32TruncSatf32Signed,
    i32TruncSatf32Unsigned,
    i32TruncSatf64Signed,
    i32TruncSatf64Unsigned,
    i64TruncSatf32Signed,
    i64TruncSatf32Unsigned,
    i64TruncSatf64Signed,
    i64TruncSatf64Unsigned,
    MemoryInit(u32),
    DataDrop(u32),
    MemoryCopy,
    MemoryFill,
    TableInit(u32, u32),
    ElemDrop(u32),
    TableCopy(u32, u32),
    TableGrow(u32),
    TableSize(u32),
    TableFill(u32),
}

impl Instruction {
    pub fn set_label_end(&mut self, end: usize) {
        match self {
            Self::Block(label) => label.continuation = end,
            Self::Loop(..) => {}
            Self::If(..) => todo!(),
            inst => panic!("{:?}", inst),
        };
    }
}
